# coding: utf-8

"""
    System Control API

    API for controlling the System Modes on Blackmagic Design products.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Format(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codec': 'str',
        'frame_rate': 'FrameRate',
        'max_off_speed_frame_rate': 'float',
        'min_off_speed_frame_rate': 'float',
        'off_speed_enabled': 'bool',
        'off_speed_frame_rate': 'float',
        'record_resolution': 'Resolution',
        'sensor_resolution': 'Resolution'
    }

    attribute_map = {
        'codec': 'codec',
        'frame_rate': 'frameRate',
        'max_off_speed_frame_rate': 'maxOffSpeedFrameRate',
        'min_off_speed_frame_rate': 'minOffSpeedFrameRate',
        'off_speed_enabled': 'offSpeedEnabled',
        'off_speed_frame_rate': 'offSpeedFrameRate',
        'record_resolution': 'recordResolution',
        'sensor_resolution': 'sensorResolution'
    }

    def __init__(self, codec=None, frame_rate=None, max_off_speed_frame_rate=None, min_off_speed_frame_rate=None, off_speed_enabled=None, off_speed_frame_rate=None, record_resolution=None, sensor_resolution=None):  # noqa: E501
        """Format - a model defined in Swagger"""  # noqa: E501
        self._codec = None
        self._frame_rate = None
        self._max_off_speed_frame_rate = None
        self._min_off_speed_frame_rate = None
        self._off_speed_enabled = None
        self._off_speed_frame_rate = None
        self._record_resolution = None
        self._sensor_resolution = None
        self.discriminator = None
        if codec is not None:
            self.codec = codec
        if frame_rate is not None:
            self.frame_rate = frame_rate
        if max_off_speed_frame_rate is not None:
            self.max_off_speed_frame_rate = max_off_speed_frame_rate
        if min_off_speed_frame_rate is not None:
            self.min_off_speed_frame_rate = min_off_speed_frame_rate
        if off_speed_enabled is not None:
            self.off_speed_enabled = off_speed_enabled
        if off_speed_frame_rate is not None:
            self.off_speed_frame_rate = off_speed_frame_rate
        if record_resolution is not None:
            self.record_resolution = record_resolution
        if sensor_resolution is not None:
            self.sensor_resolution = sensor_resolution

    @property
    def codec(self):
        """Gets the codec of this Format.  # noqa: E501

        Currently selected codec  # noqa: E501

        :return: The codec of this Format.  # noqa: E501
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this Format.

        Currently selected codec  # noqa: E501

        :param codec: The codec of this Format.  # noqa: E501
        :type: str
        """

        self._codec = codec

    @property
    def frame_rate(self):
        """Gets the frame_rate of this Format.  # noqa: E501


        :return: The frame_rate of this Format.  # noqa: E501
        :rtype: FrameRate
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this Format.


        :param frame_rate: The frame_rate of this Format.  # noqa: E501
        :type: FrameRate
        """

        self._frame_rate = frame_rate

    @property
    def max_off_speed_frame_rate(self):
        """Gets the max_off_speed_frame_rate of this Format.  # noqa: E501


        :return: The max_off_speed_frame_rate of this Format.  # noqa: E501
        :rtype: float
        """
        return self._max_off_speed_frame_rate

    @max_off_speed_frame_rate.setter
    def max_off_speed_frame_rate(self, max_off_speed_frame_rate):
        """Sets the max_off_speed_frame_rate of this Format.


        :param max_off_speed_frame_rate: The max_off_speed_frame_rate of this Format.  # noqa: E501
        :type: float
        """

        self._max_off_speed_frame_rate = max_off_speed_frame_rate

    @property
    def min_off_speed_frame_rate(self):
        """Gets the min_off_speed_frame_rate of this Format.  # noqa: E501


        :return: The min_off_speed_frame_rate of this Format.  # noqa: E501
        :rtype: float
        """
        return self._min_off_speed_frame_rate

    @min_off_speed_frame_rate.setter
    def min_off_speed_frame_rate(self, min_off_speed_frame_rate):
        """Sets the min_off_speed_frame_rate of this Format.


        :param min_off_speed_frame_rate: The min_off_speed_frame_rate of this Format.  # noqa: E501
        :type: float
        """

        self._min_off_speed_frame_rate = min_off_speed_frame_rate

    @property
    def off_speed_enabled(self):
        """Gets the off_speed_enabled of this Format.  # noqa: E501


        :return: The off_speed_enabled of this Format.  # noqa: E501
        :rtype: bool
        """
        return self._off_speed_enabled

    @off_speed_enabled.setter
    def off_speed_enabled(self, off_speed_enabled):
        """Sets the off_speed_enabled of this Format.


        :param off_speed_enabled: The off_speed_enabled of this Format.  # noqa: E501
        :type: bool
        """

        self._off_speed_enabled = off_speed_enabled

    @property
    def off_speed_frame_rate(self):
        """Gets the off_speed_frame_rate of this Format.  # noqa: E501


        :return: The off_speed_frame_rate of this Format.  # noqa: E501
        :rtype: float
        """
        return self._off_speed_frame_rate

    @off_speed_frame_rate.setter
    def off_speed_frame_rate(self, off_speed_frame_rate):
        """Sets the off_speed_frame_rate of this Format.


        :param off_speed_frame_rate: The off_speed_frame_rate of this Format.  # noqa: E501
        :type: float
        """

        self._off_speed_frame_rate = off_speed_frame_rate

    @property
    def record_resolution(self):
        """Gets the record_resolution of this Format.  # noqa: E501


        :return: The record_resolution of this Format.  # noqa: E501
        :rtype: Resolution
        """
        return self._record_resolution

    @record_resolution.setter
    def record_resolution(self, record_resolution):
        """Sets the record_resolution of this Format.


        :param record_resolution: The record_resolution of this Format.  # noqa: E501
        :type: Resolution
        """

        self._record_resolution = record_resolution

    @property
    def sensor_resolution(self):
        """Gets the sensor_resolution of this Format.  # noqa: E501


        :return: The sensor_resolution of this Format.  # noqa: E501
        :rtype: Resolution
        """
        return self._sensor_resolution

    @sensor_resolution.setter
    def sensor_resolution(self, sensor_resolution):
        """Sets the sensor_resolution of this Format.


        :param sensor_resolution: The sensor_resolution of this Format.  # noqa: E501
        :type: Resolution
        """

        self._sensor_resolution = sensor_resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Format, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Format):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
