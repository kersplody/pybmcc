# coding: utf-8

"""
    Transport Control API

    API for controlling Transport on Blackmagic Design products.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Playback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'loop': 'bool',
        'single_clip': 'bool',
        'speed': 'float',
        'position': 'int'
    }

    attribute_map = {
        'type': 'type',
        'loop': 'loop',
        'single_clip': 'singleClip',
        'speed': 'speed',
        'position': 'position'
    }

    def __init__(self, type=None, loop=None, single_clip=None, speed=None, position=None):  # noqa: E501
        """Playback - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._loop = None
        self._single_clip = None
        self._speed = None
        self._position = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if loop is not None:
            self.loop = loop
        if single_clip is not None:
            self.single_clip = single_clip
        if speed is not None:
            self.speed = speed
        if position is not None:
            self.position = position

    @property
    def type(self):
        """Gets the type of this Playback.  # noqa: E501


        :return: The type of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Playback.


        :param type: The type of this Playback.  # noqa: E501
        :type: str
        """
        allowed_values = ["Play", "Jog", "Shuttle", "Var"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def loop(self):
        """Gets the loop of this Playback.  # noqa: E501

        When true playback loops from the end of the timeline to the beginning of the timeline  # noqa: E501

        :return: The loop of this Playback.  # noqa: E501
        :rtype: bool
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """Sets the loop of this Playback.

        When true playback loops from the end of the timeline to the beginning of the timeline  # noqa: E501

        :param loop: The loop of this Playback.  # noqa: E501
        :type: bool
        """

        self._loop = loop

    @property
    def single_clip(self):
        """Gets the single_clip of this Playback.  # noqa: E501

        When true playback loops from the end of the current clip to the beginning of the current clip  # noqa: E501

        :return: The single_clip of this Playback.  # noqa: E501
        :rtype: bool
        """
        return self._single_clip

    @single_clip.setter
    def single_clip(self, single_clip):
        """Sets the single_clip of this Playback.

        When true playback loops from the end of the current clip to the beginning of the current clip  # noqa: E501

        :param single_clip: The single_clip of this Playback.  # noqa: E501
        :type: bool
        """

        self._single_clip = single_clip

    @property
    def speed(self):
        """Gets the speed of this Playback.  # noqa: E501

        Playback Speed, 1.0 for normal forward playback  # noqa: E501

        :return: The speed of this Playback.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Playback.

        Playback Speed, 1.0 for normal forward playback  # noqa: E501

        :param speed: The speed of this Playback.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def position(self):
        """Gets the position of this Playback.  # noqa: E501

        Playback position on the timeline in units of video frames  # noqa: E501

        :return: The position of this Playback.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Playback.

        Playback position on the timeline in units of video frames  # noqa: E501

        :param position: The position of this Playback.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Playback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Playback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
