# coding: utf-8

"""
    Audio Control API

    API For controlling audio on Blackmagic Design Cameras  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from AudioControl.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def audio_channel_channel_index_available_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input's current availability for the selected channel. If unavailable, the source will be muted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_available_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Available
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_available_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_available_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_available_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input's current availability for the selected channel. If unavailable, the source will be muted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_available_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Available
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_available_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_available_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Available',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_input_description_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the description of the current input of the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_input_description_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Description
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_input_description_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_input_description_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_input_description_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the description of the current input of the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_input_description_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Description
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_input_description_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_input_description_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/input/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Description',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_input_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input (source and type) for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_input_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Input
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_input_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_input_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_input_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input (source and type) for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_input_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Input
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_input_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_input_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/input', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Input',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_input_put(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_input_put(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param Input body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_input_put_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_input_put_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_input_put_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_input_put_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param Input body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_input_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_input_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/input', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_level_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input level for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_level_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Level
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_level_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_level_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_level_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input level for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_level_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Level
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_level_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_level_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/level', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Level',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_level_put(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input level for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_level_put(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param Level body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_level_put_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_level_put_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_level_put_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input level for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_level_put_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param Level body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_level_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_level_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/level', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_low_cut_filter_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input low cut filter for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_low_cut_filter_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: LowCutFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_low_cut_filter_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_low_cut_filter_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_low_cut_filter_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input low cut filter for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_low_cut_filter_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: LowCutFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_low_cut_filter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_low_cut_filter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/lowCutFilter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LowCutFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_low_cut_filter_put(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input low cut filter for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_low_cut_filter_put(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param LowCutFilter body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_low_cut_filter_put_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_low_cut_filter_put_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_low_cut_filter_put_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input low cut filter for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_low_cut_filter_put_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param LowCutFilter body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_low_cut_filter_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_low_cut_filter_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/lowCutFilter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_padding_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input padding for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_padding_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Padding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_padding_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_padding_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_padding_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input padding for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_padding_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: Padding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_padding_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_padding_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/padding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Padding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_padding_put(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input padding for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_padding_put(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param Padding body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_padding_put_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_padding_put_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_padding_put_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio input padding for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_padding_put_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param Padding body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_padding_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_padding_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/padding', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_phantom_power_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input phantom power for the selected channel if possible  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_phantom_power_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: PhantomPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_phantom_power_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_phantom_power_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_phantom_power_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the audio input phantom power for the selected channel if possible  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_phantom_power_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :return: PhantomPower
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_phantom_power_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_phantom_power_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/phantomPower', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhantomPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_phantom_power_put(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio phantom power for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_phantom_power_put(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param PhantomPower body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_phantom_power_put_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_phantom_power_put_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_phantom_power_put_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Set the audio phantom power for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_phantom_power_put_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its input is being controlled. (Channels index from 0) (required)
        :param PhantomPower body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_phantom_power_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_phantom_power_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/phantomPower', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def audio_channel_channel_index_supported_inputs_get(self, channel_index, **kwargs):  # noqa: E501
        """Get the list of supported inputs and their availability to switch to for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_supported_inputs_get(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its supported inputs are being queried. (Channels index from 0) (required)
        :return: SupportedInputs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.audio_channel_channel_index_supported_inputs_get_with_http_info(channel_index, **kwargs)  # noqa: E501
        else:
            (data) = self.audio_channel_channel_index_supported_inputs_get_with_http_info(channel_index, **kwargs)  # noqa: E501
            return data

    def audio_channel_channel_index_supported_inputs_get_with_http_info(self, channel_index, **kwargs):  # noqa: E501
        """Get the list of supported inputs and their availability to switch to for the selected channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.audio_channel_channel_index_supported_inputs_get_with_http_info(channel_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channel_index: The index of the channel that its supported inputs are being queried. (Channels index from 0) (required)
        :return: SupportedInputs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audio_channel_channel_index_supported_inputs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_index' is set
        if ('channel_index' not in params or
                params['channel_index'] is None):
            raise ValueError("Missing the required parameter `channel_index` when calling `audio_channel_channel_index_supported_inputs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_index' in params:
            path_params['channelIndex'] = params['channel_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/audio/channel/{channelIndex}/supportedInputs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportedInputs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
